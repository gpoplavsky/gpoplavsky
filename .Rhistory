source('~/.active-rstudio-document')
runApp('asdad')
plotOutput??
runApp('asdad')
runApp('asdad')
runApp('asdad')
install.packages("optionstrat")
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/CallEvalBandS.R', encoding = 'UTF-8')
calleval(s, x, sigma, t, r, d = 0)
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/CallEvalBandS.R', encoding = 'UTF-8')
calleval(s, x, sigma, t, r, d = 0)
dv(s = 100, x1 = 90, x2 = 95, x3 = 105, x4 = 110, t = 0.08, r = 0.02, sigma = 0.2, vol = 0.3)
plotbearcall(s= 100, x1 = 95, x2 = 105, t = (45/365), r = 0.02,
sigma = 0.20, sigma2 = 0.20, d = 0, ll = 0.75, ul = 1.25)
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
#OUTPUT
#llamamos a la función plotbullcall que grafica la estrategia bullspread con calls
plotbullcall(s, x1, x2, t, r, sigma, sigma2, d = 0,
ll = 0.75, ul = 1.25, xlab = "Precio Subyacente", ylab = "Ganancia/Pérdida",
main = "Bull Call Spread", ...)
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
#llamamos a la función plotbullcall que grafica la estrategia bullspread con calls
plotbullcall(s, x1, x2, t, r, sigma, sigma2, d = 0,
ll = 0.75, ul = 1.25, xlab = "Precio Subyacente", ylab = "Ganancia/Pérdida",
main = "Bull Call Spread", ...)
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
calleval(s, x, sigma, t, r, d = 0)
#calculamos la volatilidad implícita en el strike más bajo
sigma <- iv.calc(type, price1, s, x1, t, r, d = 0)
calleval(s, x1, sigma, t, r, d = 0)
calleval(s, x2, sigma, t, r, d = 0)
hoy <- today(tzone = "GMT")
install.packages("lubridate")
library(lubridate)
hoy <- today(tzone = "GMT")
hoy <- today(tzone = "UTC")
hoy <- now(tzone = "UTC")
hoy <- now(tzone = "GMT-3")
hoy <- now(tzone = "GMT")
hoy <- now(tzone = "UTC-3")
vencimiento <- as.date("2021-06-18 15:00")
vencimiento <- as.Date("2021-06-18 15:00")
vencimiento <- as.Date("2021-06-18 15:00:00 UTC")
vencimiento <- as.Time("2021-06-18 15:00:00 UTC")
vencimiento <- date("2021-06-18 15:00:00 UTC")
difftime(as.POSIXct(vencimiento), as.POSIXct(hoy, tz="GMT"), units="days")
diff(as.POSIXct(vencimiento), as.POSIXct(hoy, tz="GMT"), units="days")
diff(vencimiento, hoy, units="days")
diff(vencimiento, hoy,)
difftime(vencimiento, hoy,)
t <- as.numeric(difftime("2021-06-18", today()), units="year")
t <- as.numeric(difftime("2021-06-18", today()), units="days")
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
now(tzone = "UTC-3")
now(tzone = "GMT-3")
now(tzone = "GMT")
vencimiento <- date("2021-06-18 15:00:00 UTC")
as.numeric(difftime(vencimiento, now(tzone = "GMT"),))
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/CallEvalBandS.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/CallEvalBandS.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/CallEvalBandS.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/CallEvalBandS.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/CallEvalBandS.R', encoding = 'UTF-8')
install.packages("httr")
library(httr)
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
content(response, "text")
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
response <- VERB("GET", url, add_headers(x_rapidapi-key = '823e9fbca4mshc1e33d3f0954ecep1059b4jsne1c0c7b49cae', x_rapidapi-host = 'yahoo-finance15.p.rapidapi.com',), content_type("application/octet-stream"))
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
print(content(response, "text"))
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
install.packages("jsonlite")
library(jsonlite)
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
resp
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
View(resp)
resp[["content"]]
GET("http://www.colourlovers.com/api/color/6B4106?format=xml")
GET("http://www.colourlovers.com/api/color/6B4106?format=xml")
GET("http://www.colourlovers.com/api/color/6B4106?format=json")
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
View(resp)
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
get-quotes
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
getquotes
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/APIConnect.R')
texto
install.packages("quantmod")
library(quantmod)
detach("package:jsonlite", unload = TRUE)
detach("package:httr", unload = TRUE)
source('~/.active-rstudio-document')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/ObtainPrices.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/ObtainPrices.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/ObtainPrices.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/ObtainPrices.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/ObtainPrices.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/ObtainPrices.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/ObtainPrices.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/ObtainPrices.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/ObtainPrices.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/ObtainPrices.R')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
tdiff(today(tzone ="GMT"), vencimiento, "days")
tdiff(today(tzone ="GMT"), vencimiento, "year")
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
#Tercer paso: llamamos a la función plotbullcall con todos los parámetros dados
plotbullcall(s, x1, x2, t, r, sigma, sigma2, d = 0,
ll = 0.75, ul = 1.25, xlab = "Precio Subyacente", ylab = "Ganancia/Pérdida",
main = "Bull Call Spread")
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
##seteamos la fecha de vencimento del call
vencimiento <- date("2021-06-18")
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
install.packages("tidyverse")
with_tz(today(  ), "Argentina/Buenos Aires")
time <- ymd_hms("2010-12-13 15:30:30")
time
local_time(dt, tz = NULL, units = "secs")
##seteamos la fecha de vencimento del call
vencimiento = date("2021-06-18 18:00:00 GMT")
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
dias
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/BullSpreadCallsPlot.R', encoding = 'UTF-8')
shiny::runApp()
runApp()
library(rvest)
url.opciones <- "https://allaria.com.ar/es/Opcion"
tmp <- read_html(url.opciones)
tmp2 <- html_nodes(tmp, "table")
length(tmp2)
sapply(tmp2, class)
sapply(tmp2, function(x) dim(html_table(x, fill = TRUE)))
opciones <- html_table(tmp2[[1]],
dec = ","
)
head(opciones)
mi_df <- opciones[, c(1:14)]
# Ordenando por la columna 'volumen monto' en orden decreciente
df_ordenado <- mi_df[order(mi_df$`Volumen (monto)`, decreasing = T)]
df_limpio <- df_ordenado[c(1:300),]
# Ordenando por la columna 'volumen monto' en orden decreciente
df_ordenado <- mi_df[order(mi_df$`Volumen (monto)`), decreasing = T]
df_limpio <- df_ordenado[c(1:300),]
View(df_limpio)
opciones <- html_table(tmp2[[1]],
dec = "."
)
mi_df <- opciones[, c(1:14)]
# Ordenando por la columna 'volumen monto' en orden decreciente
df_ordenado <- mi_df[order(mi_df$`Volumen (monto)`), decreasing = T]
# Primeras filas
head(df_ordenado)
df_limpio <- df_ordenado[c(1:300),]
as.Date(df_limpio$Vencimiento, format = "%d/%m/%Y %H:%M")
as.Date(df_limpio$Vencimiento, format = "%d/%m/%YYY")
as.Date(df_limpio$Vencimiento, format = "%d/%m/%Y")
df_limpio$Vencimiento <-  as.Date(df_limpio$Vencimiento, format = "%d/%m/%Y")
df_limpio$Hora <-         as.Date(df_limpio$Hora, format = "%d/%m/%Y %H:%M")
df_limpio$`Último precio (prima)` <- as.numeric(df_limpio$`Último precio (prima)`, dec = ",")
df_limpio <- df_ordenado[c(1:300),]
df_limpio$Vencimiento <-  as.Date(df_limpio$Vencimiento, format = "%d/%m/%Y")
df_limpio$Hora <-         as.Date(df_limpio$Hora, format = "%d/%m/%Y %H:%M")
df_limpio$`Último precio (prima)` <- as.numeric(df_limpio$`Último precio (prima)`, dec = ",")
df_limpio <- df_ordenado[c(1:300),]
df_limpio$Vencimiento <-  as.Date(df_limpio$Vencimiento, format = "%d/%m/%Y")
df_limpio$Hora <-         as.Date(df_limpio$Hora, format = "%d/%m/%Y %H:%M")
as.numeric(df_limpio$`Último precio (prima)`, dec = ",")
as.numeric(df_limpio$`Último precio (prima)`)
gsub(',', '.', df_limpio$`Último precio (prima)`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
gsub(',', '.', df_limpio$`Último precio (prima)`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE) %>% as.numeric(df_limpio$`Último precio (prima)`)
df_limpio$`Último precio (prima)` <- gsub(',', '.', df_limpio$`Último precio (prima)`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE) %>% as.numeric(df_limpio$`Último precio (prima)`)
df_limpio$`Último precio (prima)`
View(df_limpio)
gsub(',', '.', df_limpio[,c(8:13)], ignore.case = TRUE, perl = FALSE,
+      fixed = FALSE, useBytes = FALSE)
gsub(',', '.', df_limpio[ ,c(8:13)], ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
gsub(',', '.', df_limpio[ ,c(8:13)], ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)  %>% as.numeric(df_limpio[ ,c(8:13)])
gsub('.', '', df_limpio[ ,c(8:13)], ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE) %>% gsub('.', ',', df_limpio[ ,c(8:13)], ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE) %>% as.numeric(df_limpio[ ,c(8:13)])
gsub('.', '', df_limpio[ ,c(8:13)], ignore.case = TRUE,
perl = FALSE,
fixed = FALSE,
useBytes = FALSE) %>%
gsub('.', ',', df_limpio[ ,c(8:13)], ignore.case = TRUE,
perl = FALSE,
fixed = FALSE,
useBytes = FALSE)
gsub('.', '', df_limpio[ ,c(8:13)], ignore.case = TRUE,
gsub('.', '', df_limpio[ ,c(8:13)], ignore.case = TRUE,
perl = FALSE,
fixed = FALSE,
useBytes = FALSE)
print(gsub('.', '', df_limpio[ ,c(8:13)], ignore.case = TRUE,
perl = FALSE,
fixed = FALSE,
useBytes = FALSE))
gsub('.', '', df_limpio[ ,c(8:13)])
gsub('.', ',', df_limpio[ ,c(8:13)])
df_limpio[ ,c(8:13)] <- gsub('.', '', df_limpio[ ,c(8:13)]) %>% gsub('.', ',', df_limpio[ ,c(8:13)])
df_limpio <- df_ordenado[c(1:300),]
df_limpio$Vencimiento <-  as.Date(df_limpio$Vencimiento, format = "%d/%m/%Y")
df_limpio$Hora <-         as.Date(df_limpio$Hora, format = "%d/%m/%Y %H:%M")
df_limpio$`Último precio (prima)` <- gsub(',', '.', df_limpio$`Último precio (prima)`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE) %>% as.numeric(df_limpio$`Último precio (prima)`)
df_limpio[ ,c(8:13)] <- gsub('.', '', df_limpio[ ,c(8:13)])
df_limpio$`Volumen (lotes)` <- gsub('.', '', df_limpio$`Volumen (lotes)`)
df_limpio <- df_ordenado[c(1:300),]
df_limpio$Vencimiento <-  as.Date(df_limpio$Vencimiento, format = "%d/%m/%Y")
df_limpio$Hora <-         as.Date(df_limpio$Hora, format = "%d/%m/%Y %H:%M")
df_limpio$`Último precio (prima)` <- gsub(',', '.', df_limpio$`Último precio (prima)`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE) %>% as.numeric(df_limpio$`Último precio (prima)`)
#df_limpio$`Volumen (lotes)` <-
gsub('.', '', df_limpio$`Volumen (lotes)`,
ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE
)
#df_limpio$`Volumen (lotes)` <-
gsub('.', '', df_limpio$`Volumen (lotes)`,
ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = TRUE
)
#df_limpio$`Volumen (lotes)` <-
gsub('.', '', df_limpio$`Volumen (lotes)`,
ignore.case = TRUE, perl = T,
fixed = FALSE, useBytes = F
)
#df_limpio$`Volumen (lotes)` <-
gsub('.', 'm', df_limpio$`Volumen (lotes)`,
ignore.case = TRUE, perl = T,
fixed = FALSE, useBytes = F
)
#df_limpio$`Volumen (lotes)` <-
gsub('.', ',', df_limpio$`Volumen (lotes)`,
ignore.case = TRUE, perl = T,
fixed = FALSE, useBytes = F
)
#df_limpio$`Volumen (lotes)` <-
gsub('.', ',', df_limpio$`Volumen (lotes)`,
ignore.case = TRUE, perl = F,
fixed = F, useBytes = F
)
df_limpio <- df_ordenado[c(1:300),]
df_limpio$Vencimiento <-  as.Date(df_limpio$Vencimiento, format = "%d/%m/%Y")
df_limpio$Hora <-         as.Date(df_limpio$Hora, format = "%d/%m/%Y %H:%M")
df_limpio$`Último precio (prima)` <- gsub(',', '.', df_limpio$`Último precio (prima)`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE) %>% as.numeric(df_limpio$`Último precio (prima)`)
#df_limpio$`Volumen (lotes)` <-
gsub('.', ',', df_limpio$`Volumen (lotes)`,
ignore.case = TRUE, perl = F,
fixed = F, useBytes = F
)
#df_limpio$`Volumen (lotes)` <-
gsub(',', '.', df_limpio[ ,c(8:11)],
ignore.case = T, perl = F,
fixed = F, useBytes = F
)
#df_limpio$`Volumen (lotes)` <-
gsub(',', '.', df_limpio[ ,c(8:11)],
ignore.case = T, perl = F,
fixed = F, useBytes = F
) %>% as.numeric(df_limpio[ ,c(8:11)])
#df_limpio$`Volumen (lotes)` <-
gsub(',', '.', df_limpio[ ,c(8:11)],
ignore.case = F, perl = F,
fixed = F, useBytes = F
) %>% as.numeric(df_limpio[ ,c(8:11)])
#df_limpio$`Volumen (lotes)` <-
gregexpr('.', df_limpio[ ,c(12:13)])
df_limpio$`Precio compra` <- gsub(',', '.', df_limpio$`Precio compra`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE) %>% as.numeric(df_limpio$`Precio compra`)
df_limpio$`Precio venta` <- gsub(',', '.', df_limpio$`Precio venta`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE) %>% as.numeric(df_limpio$`Precio venta`)
#df_limpio$`Cant. compra` <-
gsub(',', '.', df_limpio$`Cant. compra`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE) %>% as.numeric(df_limpio$`Cant. compra`)
#df_limpio$`Precio ejercicio` <-
gsub(',', '.', df_limpio$`Precio ejercicio`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE) %>% as.numeric(df_limpio$`Precio ejercicio`)
df_limpio$`Precio ejercicio` <- gsub(',', '.', df_limpio$`Precio ejercicio`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE) %>% as.numeric(df_limpio$`Precio ejercicio`)
#df_limpio$`Volumen (monto)` <-
gsub('.', ' ', df_limpio$`Precio ejercicio`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
#df_limpio$`Volumen (monto)` <-
gsub('.', '.', df_limpio$`Precio ejercicio`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
#df_limpio$`Volumen (monto)` <-
gsub('.', 'm', df_limpio$`Precio ejercicio`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
#df_limpio$`Volumen (monto)` <-
gsub('.', '', df_limpio$`Precio ejercicio`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
#df_limpio$`Volumen (monto)` <-
gsub(., '', df_limpio$`Precio ejercicio`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
#df_limpio$`Volumen (monto)` <-
gsub(., '', df_limpio$`Volumen (monto)`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
#df_limpio$`Volumen (monto)` <-
gsub(".", '', df_limpio$`Volumen (monto)`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
#df_limpio$`Volumen (monto)` <-
gsub("/./", '', df_limpio$`Volumen (monto)`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
#df_limpio$`Volumen (monto)` <-
gsub('.', ':delete:', df_limpio$`Volumen (monto)`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = TRUE)
#df_limpio$`Volumen (monto)` <-
gsub('.', '', df_limpio$`Volumen (monto)`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = TRUE)
#df_limpio$`Volumen (monto)` <-
gsub('.', '', df_limpio$`Volumen (monto)`, ignore.case = TRUE, perl = FALSE,
fixed = TRUE, useBytes = FALSE)
df_limpio$`Volumen (monto)` <- gsub('.', '', df_limpio$`Volumen (monto)`, ignore.case = TRUE, perl = FALSE,
fixed = TRUE, useBytes = FALSE)
df_limpio$`Volumen (monto)` <- gsub(',', '.', df_limpio$`Volumen (monto)`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
df_limpio$`Volumen (monto)` <- gsub(',', '.', df_limpio$`Volumen (monto)`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE) %>%
as.numeric(df_limpio$`Volumen (monto)`)
df_limpio$`Volumen (lotes)` <- gsub('.', '', df_limpio$`Volumen (lotes)`, ignore.case = TRUE, perl = FALSE,
fixed = TRUE, useBytes = FALSE)
df_limpio$`Volumen (lotes)` <- gsub(',', '.', df_limpio$`Volumen (lotes)`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE) %>%
as.numeric(df_limpio$`Volumen (lotes)`)
df_limpio$`Cant. compra` <- gsub('.', '', df_limpio$`Cant. compra`, ignore.case = TRUE, perl = FALSE,
fixed = TRUE, useBytes = FALSE)
df_limpio$`Cant. compra` <- gsub(',', '.', df_limpio$`Cant. compra`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE) %>%
as.numeric(df_limpio$`Cant. compra`)
df_limpio$`Cant. venta` <- gsub('.', '', df_limpio$`Cant. venta`, ignore.case = TRUE, perl = FALSE,
fixed = TRUE, useBytes = FALSE)
df_limpio$`Cant. venta` <- gsub(',', '.', df_limpio$`Cant. venta`, ignore.case = TRUE, perl = FALSE,
fixed = FALSE, useBytes = FALSE) %>%
as.numeric(df_limpio$`Cant. venta`)
#mostramos el dataframe ordenado por volumen
view(df_limpio[order(df_limpio$`Volumen (monto)`), decreasing = T])
View(df_limpio)
#mostramos el dataframe ordenado por volumen
View(df_limpio[order(df_limpio$`Volumen (monto)`), decreasing = T])
#mostramos el dataframe ordenado por volumen
View(df_limpio[order(df_limpio$`Volumen (monto)`), decreasing = TRUE])
#mostramos el dataframe ordenado por volumen
View(df_limpio[order(df_limpio$`Volumen (monto)`), decreasing = FALSE])
#mostramos el dataframe ordenado por volumen
View(df_limpio[order(df_limpio$`Volumen (monto)`, decreasing = TRUE)])
#mostramos el dataframe ordenado por volumen
df_limpio[order(df_limpio$`Volumen (monto)`, decreasing = TRUE)]
#mostramos el dataframe ordenado por volumen
View(df_limpio[order(x = df_limpio$`Volumen (monto)`, decreasing = TRUE)])
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/tablaRavaOptionPrice.R', encoding = 'UTF-8', echo=TRUE)
options <- df_limpio[order(x = df_limpio$`Volumen (monto)`, decreasing = TRUE)]
#mostramos el dataframe ordenado por volumen
options <- df_limpio[order(df_limpio$`Volumen (monto)`, decreasing = TRUE)]
#mostramos el dataframe ordenado por volumen
options <- df_limpio[order(df_limpio$`Volumen (monto)`), decreasing = TRUE]
View(options)
#mostramos el dataframe ordenado por volumen
options <- df_limpio[order(df_limpio$`Volumen (monto)`, decreasing = TRUE), decreasing = TRUE]
View(options)
#mostramos el dataframe ordenado por volumen
options <- df_limpio[order(df_limpio$`Volumen (monto)`, decreasing = TRUE), decreasing = TRUE] %>%
df_limpio[c(1:100),]
options <-  options[c(1:100),]
View(options)
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/tablaRavaOptionPrice.R', encoding = 'UTF-8', echo=TRUE)
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/tablaRavaOptionPrice.R', encoding = 'UTF-8', echo=TRUE)
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/CallEvalBandS.R', encoding = 'UTF-8', echo=TRUE)
print(calleval(s, x, sigma, t, r, d = 0))
# se indica la base de la opción
x = 158.98
vencimiento = "2021-08-19"
# se indica el tiempo hasta el vencimiento (en años)
hoy <- today(tzone="GMT")
days <- tdiff(hoy, vencimiento, "days")
t = (days/365)
# se indica la tasa libre de riesgo
r = 0.38
# se indica si va a haber un dividendo
d = 0
print(calleval(s, x, sigma, t, r, d = 0))
View(Precio)
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/ObtainVolatility.R', echo=TRUE)
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/CallEvalBandS.R', encoding = 'UTF-8', echo=TRUE)
vencimiento = "2021-06-18"
days <- tdiff(hoy, vencimiento, "days")
t = (days/365)
print(calleval(s, x, sigma, t, r, d = 0))
source('~/R/ShinyApps Projects/optionStrategies/callBullspreadStrategies/CallEvalBandS.R', encoding = 'UTF-8', echo=TRUE)
